package com.kwonpro.www;

import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.swing.JOptionPane;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.kwonpro.www.dao.NDao;
import com.kwonpro.www.dto.Notice;

/**
 * Handles requests for the application home page.
 */

@Controller
public class HomeController {
	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);
	
	@Autowired
	private SqlSession sqlSession;
	
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String home(Locale locale, Model model, HttpSession session) {
		logger.info("Welcome home! The client locale is {}.", locale);
		
		SessionFunc.sessionControl(model, session);
		
		NDao dao = sqlSession.getMapper(NDao.class);
		model.addAttribute("list", dao.recentlyList());
		
		return "home";
	}
	
	@RequestMapping("/notice")
	public String noticeList(HttpServletRequest request, Model model, Locale locale, HttpSession session){
		logger.info("The client locale is {}.", locale);
		SessionFunc.sessionControl(model, session);
		String pageStr = request.getParameter("page");
		int page;
		if(pageStr == null || pageStr.equals("")){
			page = 1;			
		}else {
			page = Integer.parseInt(pageStr);
		}		
		
		NDao dao = sqlSession.getMapper(NDao.class);
		
		model.addAttribute("page", page);
		model.addAttribute("list", dao.list(page));
		model.addAttribute("maxPage", dao.allPage());
		
		return "notice";
	}
	
	@RequestMapping("/notice/detail")
	public String noticeDetail(HttpServletRequest request, Model model, Locale locale,  HttpSession session){
		logger.info("The client locale is {}.", locale);
		SessionFunc.sessionControl(model, session);
		int id = Integer.parseInt(request.getParameter("id"));
		
		NDao dao = sqlSession.getMapper(NDao.class);
		dao.upHit(id);
		
		model.addAttribute("notice", dao.curNotice(id));
		model.addAttribute("nextNotice", dao.nextNotice(id));
		model.addAttribute("preNotice", dao.preNotice(id));
		
		return "notice_detail";
	} 
	
	@RequestMapping("/notice/edit")
	public String noticeEdit(HttpServletRequest request, Model model, Locale locale,  HttpSession session){
		logger.info("The client locale is {}.", locale);
		if(session.getAttribute("uid") == null){
			JOptionPane.showMessageDialog(null, "잘못 된 접근입니다.(로그인되어 있지 않습니다.)");
			return "redirect:/member/login";
		}
		SessionFunc.sessionControl(model, session);
		int id = Integer.parseInt(request.getParameter("id"));
		NDao dao = sqlSession.getMapper(NDao.class);
		Notice vo = dao.curNotice(id);
		if( vo == null || !((String) session.getAttribute("uid")).equals(vo.getWriterId())) {
			JOptionPane.showMessageDialog(null, "잘못 된 접근입니다.(수정할 수 없는 게시글 입니다.)");
			return "redirect:/notice";
		}
		
		model.addAttribute("notice", vo);
		
		return "notice_edit";
	} 
	
	
	@RequestMapping(value="/notice/update", method = RequestMethod.POST)
	public String noticeUpdate(HttpServletRequest request, Model model, Locale locale,  HttpSession session){
		logger.info("The client locale is {}.", locale);
		SessionFunc.sessionControl(model, session);
		int id = Integer.parseInt(request.getParameter("id"));
		if(session.getAttribute("uid")==null) {
			JOptionPane.showMessageDialog(null, "잘못 된 접근입니다.(로그인되어 있지 않습니다.)");
			return "redirect:/member/login";
		}
		if(!((String) session.getAttribute("uid")).equals(request.getParameter("writerId"))) {
			JOptionPane.showMessageDialog(null, "잘못 된 접근입니다.(아이디가 다릅니다.)");
			return "redirect:/notice";
		}
		NDao dao = sqlSession.getMapper(NDao.class);
		Notice vo = new Notice();
		vo.setId(id);
		vo.setTitle(request.getParameter("title"));
		vo.setContent(request.getParameter("content"));
		String file = request.getParameter("newfile");
		if(file.equals("")) {
			vo.setFiles(request.getParameter("file"));
		}else {
			vo.setFiles(file);
		}
		dao.update(vo);
		
		return "redirect:/notice/detail?id="+ id;
	}	
	
	
	@RequestMapping("/notice/write")
	public String noticeWrite(HttpServletRequest request, Model model, Locale locale, HttpSession session){
		logger.info("The client locale is {}.", locale);
		if(session.getAttribute("uid")==null) {
//			JOptionPane.showMessageDialog(null, "로그인 후 글을 쓰실 수 있습니다.");
			return "redirect:/member/login";
		}
		SessionFunc.sessionControl(model, session);
		return "notice_write";
	}
	
	@RequestMapping("/notice/register")
	public String noticeRegister(HttpServletRequest request, Model model, Locale locale, HttpSession session){
		logger.info("The client locale is {}.", locale);
		if(session.getAttribute("uid")==null) {
			JOptionPane.showMessageDialog(null, "잘못 된 접근입니다.(로그인되어 있지 않습니다.)");
			return "redirect:/member/login";
		}
		SessionFunc.sessionControl(model, session);
		NDao dao = sqlSession.getMapper(NDao.class);

		Notice vo = new Notice();
		vo.setTitle(request.getParameter("title"));
		vo.setFiles(request.getParameter("file"));
		vo.setContent(request.getParameter("content"));
		vo.setWriterId((String) session.getAttribute("uid"));
		dao.write(vo);
		
		return "redirect:/notice";
	} 
	
	@RequestMapping("/notice/delete")
	public String noticeDelete(HttpServletRequest request, Model model, Locale locale,  HttpSession session){
		logger.info("The client locale is {}.", locale);
		if(session.getAttribute("uid")==null) {
			JOptionPane.showMessageDialog(null, "잘못 된 접근입니다.(로그인되어 있지 않습니다.)");
			return "redirect:/member/login";
		}
		
		String id = request.getParameter("id");
		if(id == null || id.equals("")) {
			JOptionPane.showMessageDialog(null, "삭제글 번호 없음");
			return "redirect:/notice";
		}
		
		NDao dao = sqlSession.getMapper(NDao.class);
		int nid = Integer.parseInt(id);
		Notice vo = dao.curNotice(nid);
		if(vo == null) {
			JOptionPane.showMessageDialog(null, "없는 게시글 입니다.");
			return "redirect:/notice";
		}else if(!((String) session.getAttribute("uid")).equals(vo.getWriterId())) {
			JOptionPane.showMessageDialog(null, "잘못 된 접근입니다.(아이디가 다릅니다.)");
			return "redirect:/notice";
		}
		
		SessionFunc.sessionControl(model, session);
		dao.delete(nid);
		
		return "redirect:/notice";
	} 	

}
